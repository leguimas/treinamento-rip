package br.com.dextra.captus.infra.utils;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class DateUtils {

	/**
	 * Construtor privado para evitar instanciacao da classe DateUtils
	 */
	private DateUtils() {

	}

	/**
	 * Metodo responsavel por remover ( zerar ) a hora de uma data
	 *
	 * @param Date data cuja hora seja removida
	 * @return data sem hora (dd/MM/yyyy 00:00:00)
	 */
	public static Date removerHora(Date date) {
		Date dataSemHora = null;

		try {
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			dataSemHora = dateFormat.parse(dateFormat.format(date));
		} catch (ParseException e) {
			throw new RuntimeException(e);
		}

		return dataSemHora;
	}

	/**
	 * Metodo responsavel por obter a data de hoje sem a hora
	 *
	 * @return data de hoje sem hora (dd/MM/yyyy 00:00:00)
	 */
	public static Date hojeSemHora() {
		return removerHora(new Date());
	}

	/**
	 * Metodo responsavel por obter uma data (sem hora) que represente o primeiro dia do ano corrente
	 *
	 * @return data representando o primeiro dia do ano
	 */
	public static Date getPrimeiroDiaAno() {

		Calendar calendar = new GregorianCalendar();

		calendar.set(Calendar.HOUR_OF_DAY, 0);
		calendar.set(Calendar.MINUTE, 0);
		calendar.set(Calendar.SECOND, 0);
		calendar.set(Calendar.DAY_OF_MONTH, 1);
		calendar.set(Calendar.MONTH, 0);

		return calendar.getTime();
	}

	/**
	 * Metodo responsavel por obter uma data (sem hora) que represente o ultimo dia do ano corrente
	 *
	 * @return data representando o ultimo dia do ano
	 */
	public static Date getUltimoDiaAno() {

		Calendar calendar = new GregorianCalendar();

		calendar.set(Calendar.HOUR_OF_DAY, 23);
		calendar.set(Calendar.MINUTE, 59);
		calendar.set(Calendar.SECOND, 59);
		calendar.set(Calendar.DAY_OF_MONTH, 31);
		calendar.set(Calendar.MONTH, 11);

		return calendar.getTime();
	}

	/**
	 * Metodo responsavel por obter a primeira hora do dia a partir de uma determinada data ( dd/MM/yyyy 00:00 )
	 *
	 * @param date data a ser processada
	 * @return data com inicio do dia determinado
	 */
	public static Date getInicioDoDia(Date date) {
		return removerHora(date);
	}

	/**
	 * Metodo responsavel por obter a ultima hora do dia a partir de uma determinada data ( dd/MM/yyyy 23:59:59 )
	 *
	 * @param date data a ser processada
	 * @return data com final do dia determinado
	 */
	public static Date getFimDoDia(Date date) {
		Calendar calendar = new GregorianCalendar();
		calendar.setTime(date);
		calendar.set(Calendar.HOUR_OF_DAY, 23);
		calendar.set(Calendar.MINUTE, 59);
		calendar.set(Calendar.SECOND, 59);

		return calendar.getTime();
	}

	/**
	 * Metodo responsavel por obter o numero de dias entre duas datas
	 *
	 * @param start Data inicial
	 * @param end Data final
	 * @return numero de dias da diferenca
	 */
	public static int obterDiferencaDiasEntreDatas(Date start, Date end) {
		long tempoInicial = start.getTime();
		long tempoFinal = end.getTime();

		long delta = tempoFinal - tempoInicial;

		return (int) (delta / 86400000L);
	}

	/**
	 * Metodo responsavel por formatar uma data na sua representacao string
	 *
	 * @param date data a ser formatada
	 * @return data formatada (dd/MM/yyyy)
	 */
	public static String formatarData(Date date) {
		String dataFormatada = "";

		if (date != null) {
			SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
			dataFormatada = formatter.format(date);
		}

		return dataFormatada;
	}

	/**
	 * Metodo responsavel por formatar uma data/hora na sua representacao string
	 *
	 * @param date data/hora a ser formatada
	 * @return data formatada (dd/MM/yyyy HH:mm)
	 */
	public static String formatarDataHora(Date date) {
		String dataHoraFormatada = "";

		if (dataHoraFormatada != null) {
			SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm");
			dataHoraFormatada = formatter.format(date);
		}

		return dataHoraFormatada;
	}

	/**
	 * Metodo responsavel por formatar uma hora na sua representacao string
	 *
	 * @param date hora a ser formatada
	 * @return hora formatada (HH:mm)
	 */
	public static String formatarHora(Date date) {
		String horaFormatada = "";

		if (horaFormatada != null) {
			SimpleDateFormat formatter = new SimpleDateFormat("HH:mm");
			horaFormatada = formatter.format(date);
		}

		return horaFormatada;
	}

	/**
	 * Metodo responsavel por obter o dia de ontem sem as horas ( dd/MM/yyyy 00:00:00 )
	 *
	 * @return dia de ontem sem a representacao das horas
	 */
	public static Date getOntemSemHora() {

		Calendar calendar = Calendar.getInstance();
		calendar.add(Calendar.DAY_OF_MONTH, -1);

		return removerHora(calendar.getTime());
	}

	/**
	 * Adiciona/Subtrai uma determinada quantidade de dias a dataBase.
	 *
	 * @param dataBase Data base.
	 * @param quantidadeDias Quantidade de dias a ser adicionada/subtraida.
	 * @return dataBase +/- quantidadeDias;
	 */
	public static Date adicionarDias(Date dataBase, int quantidadeDias) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(dataBase);
		calendar.add(Calendar.DAY_OF_MONTH, quantidadeDias);

		return calendar.getTime();
	}

	/**
	 * Adiciona quantidadeDias a dataBase.
	 *
	 * @param dataBase Data base.
	 * @param quantidadeDias Quantidade de dias a ser adicionada.
	 * @return dataBase + quantidadeDias;
	 */
	public static boolean ehFinalDeSemana(Date dataBase) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(dataBase);
		return (calendar.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY || calendar.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY);
	}

	/**
	 * Metodo responsavel por extrair o dia de uma data
	 *
	 * @param data
	 *            data cujo dia sera extraido e formatado
	 * @return dia extraido da data
	 */
	public static String obterDia(Date data) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(data);

		return StringUtils.acrescentaZerosAEsquerda(String.valueOf(calendar.get(Calendar.DAY_OF_MONTH)), 2);
	}

	/**
	 * Metodo responsavel por extrair o mes de uma data
	 *
	 * @param data
	 *            data cujo mes sera extraido e formatado
	 * @return mes extraido da data
	 */
	public static String obterMes(Date data) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(data);

		return StringUtils.acrescentaZerosAEsquerda(String.valueOf(calendar.get(Calendar.MONTH) + 1), 2);
	}

	/**
	 * Metodo responsavel por extrair o mes de uma data
	 *
	 * @param data
	 *            data cujo ano sera extraido e formatado
	 * @return mes extraido da data
	 */
	public static String obterAno(Date data) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(data);

		return String.valueOf(calendar.get(Calendar.YEAR));
	}

	/**
	 * Metodo responsavel por obter o proximo dia da semana a partir de uma data base e uma quantidade de
	 * dias adicional
	 * @param dataBase data de base
	 * @param numeroDias dias a serem somados na base
	 * @return data obtida
	 */
	public static Date getProximoDiaDaSemanaAPartirDe(Date dataBase, int numeroDias) {
		Calendar c = GregorianCalendar.getInstance();
		c.setTime(dataBase);
		c.add(Calendar.DAY_OF_MONTH, numeroDias);

		int diaDaSemana = c.get(Calendar.DAY_OF_WEEK);
		if (diaDaSemana == Calendar.SATURDAY) {
			c.add(Calendar.DAY_OF_MONTH, 2);
		} else {
			if (diaDaSemana == Calendar.SUNDAY) {
				c.add(Calendar.DAY_OF_MONTH, 1);
			}
		}

		return c.getTime();
	}

	/**
	 * Metodo responsavel por retornar o proximo dia da semana a partir de uma data base e uma quantidade de
	 * dias acidionais desconsiderando sabados e domingos.
	 *
	 * @param dataBase data inicial.
	 * @param numeroDias total de dias uteis de deslocamento.
	 * @return data obtida.
	 */
	public static Date getProximoDiaUtilAPartirDeDesconsiderandoFDS(Date dataBase, int numeroDias) {
		Calendar c = GregorianCalendar.getInstance();
		Calendar proximoDiaUtil = c;
		int diasUteis = 0;
		int diasContados = 0;
		do {
			c.setTime(dataBase);
			c.add(Calendar.DAY_OF_MONTH, diasContados);

			if (!ehFinalDeSemana(c.getTime())) {
				proximoDiaUtil = c;
				diasUteis++;
			}

			diasContados++;

		} while (diasUteis <= numeroDias);

		return proximoDiaUtil.getTime();
	}

	/**
	 * Metodo responsavel por obter o proximo dia da semana a partir de uma data base
	 * @param dataBase data de base
	 * @return data obtida
	 */
	public static Date getProximoDiaDaSemanaAPartirDe(Date dataBase) {
		return getProximoDiaDaSemanaAPartirDe(dataBase, 1);
	}

	public static Date getDiaDaSemanaAnteriorAPartirDe(Date dataBase) {
		Calendar c = GregorianCalendar.getInstance();
		c.setTime(dataBase);
		c.add(Calendar.DAY_OF_MONTH, -1);

		int diaDaSemana = c.get(Calendar.DAY_OF_WEEK);
		if (diaDaSemana == Calendar.SATURDAY) {
			c.add(Calendar.DAY_OF_MONTH, -2);
		} else {
			if (diaDaSemana == Calendar.SUNDAY) {
				c.add(Calendar.DAY_OF_MONTH, -1);
			}
		}

		return c.getTime();
	}

	/**
	 * Metodo responsavel por obter a idade de uma pessoa a partir da data de seu nascimento
	 * @param dataNascimento data de nascimento
	 * @return idade em anos
	 */
	public static long getIdade(Date dataNascimento) {
		Calendar hoje = Calendar.getInstance();
		hoje.setTime(new Date());
		Calendar nascimento = Calendar.getInstance();
		nascimento.setTime(dataNascimento);

		if (hoje.get(Calendar.DAY_OF_YEAR) < nascimento.get(Calendar.DAY_OF_YEAR)) {
			return hoje.get(Calendar.YEAR) - nascimento.get(Calendar.YEAR) - 1;
		}

		return hoje.get(Calendar.YEAR) - nascimento.get(Calendar.YEAR);
	}

	/**
	 * Verifica se a data inicial &eacute; menor que a data final. Caso a data inicial seja menor ent&atilde;o retorna verdadeiro.
	 *
	 * @param dataInicial data inicial do periodo a ser verificado
	 * @param dataFinal data final do periodo a ser verificado
	 */
	public static boolean isPeriodoValido(Date dataInicial, Date dataFinal) {
		if (dataInicial == null || dataFinal == null) {
			return false;
		}
		return removerHora(dataInicial).compareTo(removerHora(dataFinal)) < 0;

	}

	/**
	 * Metodo responsavel por verificar se uma hora eh valida ou nao. (formato hh:mm)
	 * @param horaParaValidacao hora a ser validada
	 * @return flag indicando se a hora eh valida ou nao
	 */
	public static boolean isHoraValida(String horaParaValidacao){
		boolean isHoraValida = false;

		// validacao atraves de expressao regular
		Pattern pattern = Pattern.compile("([01][0-9]|2[0-3]):[0-5][0-9]");
		Matcher matcher = pattern.matcher(horaParaValidacao);
		isHoraValida = matcher.matches();

		return isHoraValida;
	}
}
